package Ex06Object_orientedProgramming;
/*
 * 멤버변수의 초기화
 * 지역변수와는 달리 멤버변수는 각 타입의 기본값으로 자동 초기화 됨
 * 그 다음 명시적 초기화, 초기화 블럭, 생성자의 순서로 초기화 됨
 * 클래스 변수가 인스턴스 변수보다 먼저 초기화됨
 * 
 *  이 두가지만 기억할것
 *  1.클래스 변수 초기화 -> 인스턴스 변수 초기화
 *  2.자동 초기화 -> 명시적 초기화(간단) -> 초기화 블럭, 생성자(복잡)
 *  
 *  명시적 초기화
 *  변수를 선언과 동시에 초기화하는것
 *  ex) int door = 4;
 *  명시적 초기화가 간단 명료하긴 하지만 보다 복잡한 초기화 작업이 필요할 때는 초기화 블럭 또는 생성자를 사용
 *  
 *  초기화 블럭
 *  클래스 초기화 블럭 - 클래스 변수의 복잡한 초기화에 사용
 *  클래스 블럭의 초기화 방법 - 인스턴스 초기화 블럭 앞에 static을 붙인다.
 *  
 *  인스턴스 초기화 블럭 - 인스턴스 변수의 복잡한 초기화에 사용
 *  인스턴스 블럭의 초기화 방법 - 클래스 내에 {}블럭을 만들고 그 안에 코드 작성
 */
public class Ex6_14 {
	//클래스 초기화 블럭
	static {
		System.out.println("static{ }");
	}
	//인스턴스 초기화 블럭
	{
		System.out.println("{ }");
	}
	//생성자
	public Ex6_14() {
		System.out.println("생성자");
	}
	
	public static void main(String[] args) {
		System.out.println("Ex6_14 bt = new Ex6_14(); ");
		Ex6_14 bt = new Ex6_14();
		
		System.out.println("Ex6_14 bt2 = new Ex6_14();");
		Ex6_14 bt2 = new Ex6_14();
	}
}
/*
 * 실행 순서
 * 클래스 초기화블럭 - 메인 메서드 - 인스턴스 변수 생성되면서 인스턴스 변수 초기화블럭 수행 - 생성자블럭 수행
 * 클래스 초기화 블럭은 메모리 로딩될때 딱 한번 실행되지만 인스턴스 초기화 블럭은 생성될 때마다 수행된다.
 */











