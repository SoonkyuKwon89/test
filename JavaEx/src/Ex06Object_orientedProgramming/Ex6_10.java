package Ex06Object_orientedProgramming;
/*
 * 생성자(constructor)
 * 생성자란? 인스턴스가 생성될 때 호출되는 인스턴스 초기화 메서드
 * 인스턴스란? - 클래스로부터 만들어진 객체
 * 생성자는 인스턴스 변수의 초기화 작업에도 사용되지만, 인스턴스 생성 시에 실행되어야 하는 작업을 위해서도 사용된다.
 * 
 * 생성자의 조건
 * 1.생성자의 이름은 클래스의 이름과 같아야 한다.
 * 2.생성자는 리턴 값이 없다.(void는 붙이지 않는다.)
 * 
 * 생성자의 정의방법
 * 클래스 이름(타입 변수명, 타입 변수명, ...){
 *	//인스턴스 생성 시 수행 될 코드,
 *	//주로 인스턴스 변수의 초기화 코드를 적는다.
 *	}
 *	*생성자도 오버로딩이 가능하다! 그렇기 때문에 하나의 클래스에 여러개의 생성자가 존재 할 수도 있다.
 *
 * 기본 생성자
 * 원래 모든 클래스에는 반드시 하나 이상의 생성자가 정의되어 있어야 하지만, 지금까지 생성자를 정의하지 않고서도 인스턴스를 생성 할 수 있었던 이유는
 * 컴파일러가 제공하는 기본 생성자 덕분이였다.
 * 
 * 컴파일 할 때, 소스파일의 클래스에 생성자가 하나도 정의되지 않은 경우 컴파일러는 자동적으로 아래와 같은 내용의 기본 생성자를 추가하여 컴파일한다.
 * 	클래스이름(){} // 기본생성자
 * 	point(){} //point 클래스의 기본생성자
 * 
 * 컴파일러가 자동적으로 기본 생성자를 생성해주는 경우는 클래스내에 생성자가 하나도 없을 때 뿐이다.
 */

class Data_1 { // 생성자를 생성하지 않았기때문에 컴파일 할 때 기본생성자가 사용된다.
	int value;
	
	//Data_1(){} //기본생성자 생략
}

class Data_2 {
	int value;
	
	//Data_2(){} //기본생성자를 생성해주면 에러가 나지 않는다.

	Data_2(int x) { //매개변수가 있는 생성자를 생성했기 때문에 기본 생성자가 생성되지 않는다.
		value = x;
	}
	
}

public class Ex6_10 {
	public static void main(String[] args) {
	Data_1 d1 = new Data_1();
	//Data_2 d2 = new Data_2();	에러가 나는 이유 - Data_2 클래스에 생성자 Data_2()가 정의되어 있지 않기 때문에
	Data_2 d2 = new Data_2(10); //혹은 만들어져 있는 생성자를 사용하게 된다면 에러가 나지 않는다.
	}

}
